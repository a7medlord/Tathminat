@using CloudApp.Models.BusinessModel

    
@if (User.IsInRole("au") || User.IsInRole("apr"))
{
    <script>
        var info = [];
        @if (ViewBag.data != null) {
            foreach(PriceMapModelView item in (List<PriceMapModelView>)ViewBag.data)
            {
                <text>
                    info.push({Longtut:@item.Longtut,Latutue:@item.Latutue ,TypeOfAqar: "@item.TypeOfAqar" , Type: @item.Type , Id: @item.Id , Area: "@item.Area" ,Classfications: "@item.Classfications" , PriceOfMeter: "@item.PriceOfMeter ", SoqfPrice: "@item.SoqfPrice"});
                </text>
            }
        }

        function mapwork() {
            var myLatLng = { lat: Number($("#Latute").val()), lng: Number($("#Longtute").val()) };

            var map = new google.maps.Map(document.getElementById('maptest'),
                {
                    zoom: 18,
                    center: myLatLng
                });

            var marker3 = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: 'موقع العقار',
                draggable: true
            });

            for (var i = 0; i < info.length; i++) {
                var marker1 = new google.maps.Marker({
                    position: { lat: Number(info[i].Latutue), lng: Number(info[0].Longtut) },
                    map: map,
                    title: 'Hello World!',
                    animation: google.maps.Animation.DROP
                });

                (function (marker1, i) {

                    google.maps.event.addListener(marker1,
                        'click',
                        function () {
                            infowindow = new google.maps.InfoWindow({
                                content: '<div><p>نوع العقار : ' +
                                    info[i].TypeOfAqar +
                                    '</p><p>تصنيف العقار : ' +
                                    info[i].Classfications +
                                    '</p><p>المساحه : ' +
                                    info[i].Area +
                                    '</p><p>سعر المتر : ' +
                                    info[i].PriceOfMeter +
                                    '</p><p>القيمة السوقية : ' +
                                    info[i].SoqfPrice +
                                    '</p><p><a target="_blank" href="@string.Format("http://"+Context.Request.Host + "/Treatments/EditRouter/")' + info[i].Id + ";" + info[i].Type + '">معاينة</a></p></div>'
                            });

                            infowindow.open(map, marker1);
                        });
                })(marker1, i);
            }

        }

           
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDi_nL0Zh0BYDb5iZTndmJCr-uHjd1Pvhs&language=ar&libraries=places&callback=mapwork"></script>
}
else
{
    <script>
        
        //Google Map Logic
        var pos;
        var geocoder;
        var infowindowc;
        var isloaded = false;
        var map;
        var markerstotal = [];
        var markers = [];

        function cleramarkers() {
            for (var i = 0; i < markerstotal.length; i++) {
                markerstotal[i].setMap(null);
            }

            for (var n = 0; n < markers.length; n++) {
                markers[n].setMap(null);
            }
        }

        function getlog() {

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    cleramarkers();
                    var marker = new google.maps.Marker({
                        position: pos,
                        map: map,
                        title: 'موقع العقار',
                        draggable: true
                    });

                    google.maps.event.addListener(marker, "dragend", function (e) {
                        var lat, lng, address;
                        geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                lat = marker.getPosition().lat();
                                lng = marker.getPosition().lng();
                                address = results[0].formatted_address;
                                $("#Latute").val(lat);
                                $("#Longtute").val(lng);
                            }
                        });
                    });
                    markerstotal.push(marker);
                    map.setCenter(pos);

                }, function () {

                    handleLocationError(true, infoWindow, map.getCenter());
                }, {
                    enableHighAccuracy: false,
                    timeout: 30000,
                    maximumAge: 30000
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
            // End of get Current Locations
        }

        function mapwork() {

            var mapProp = {
                center: new google.maps.LatLng(Number($("#Latute").val()), Number($("#Longtute").val())),
                zoom: 18
            };

            map = new google.maps.Map(document.getElementById("maptest"), mapProp);
            var myLatLng = { lat: Number($("#Latute").val()), lng: Number($("#Longtute").val()) };
            cleramarkers();
            var marker3 = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: 'موقع العقار',
                draggable: true
            });

            google.maps.event.addListener(marker3, "dragend", function (e) {
                var lat, lng, address;
                geocoder.geocode({ 'latLng': marker3.getPosition() }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {

                        lat = marker3.getPosition().lat();
                        lng = marker3.getPosition().lng();
                        address = results[0].formatted_address;

                        $("#Latute").val(lat);
                        $("#Longtute").val(lng);
                    }
                });
            });
            markerstotal.push(marker3);

            map.addListener('center_changed', function () {
                var obj = map.getCenter();
                $("#Latute").val(obj.lat());
                $("#Longtute").val(obj.lng());

            });


            geocoder = new google.maps.Geocoder;
            infowindowc = new google.maps.InfoWindow;

            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);

            map.addListener('bounds_changed',
                function () {
                    searchBox.setBounds(map.getBounds());
                });


            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed',
                function () {
                    var places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        if (!place.geometry) {
                            console.log("Returned place contains no geometry");
                            return;
                        }

                        cleramarkers();
                        var marker2 = new google.maps.Marker({
                            map: map,
                            title: place.name,
                            position: place.geometry.location,
                            draggable: true
                        });
                        markers.push(marker2);


                        google.maps.event.addListener(marker2, "dragend", function (e) {
                            var lat, lng, address;
                            geocoder.geocode({ 'latLng': marker2.getPosition() }, function (results, status) {
                                if (status == google.maps.GeocoderStatus.OK) {

                                    lat = marker2.getPosition().lat();
                                    lng = marker2.getPosition().lng();
                                    address = results[0].formatted_address;
                                    $("#Latute").val(lat);
                                    $("#Longtute").val(lng);
                                }
                            });
                        });
                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });


        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation
                ? 'Error: الخدمه فشلت في جلب الموقع'
                : 'Error: Your browser doesn\'t support geolocation.');
        }

         

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDi_nL0Zh0BYDb5iZTndmJCr-uHjd1Pvhs&language=ar&libraries=places&callback=mapwork"></script>
}